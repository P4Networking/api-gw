// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.14.0
// source: pisc.proto

package api

import (
	proto "github.com/golang/protobuf/proto"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type LoginResponse_Role int32

const (
	// Default is UNKNOWN
	LoginResponse_UNKNOWN LoginResponse_Role = 0
	// Administrator
	LoginResponse_ADMIN LoginResponse_Role = 1
	// Light administrator have less privilege.
	LoginResponse_LIGHT_ADMIN LoginResponse_Role = 2
	// User can do most action.
	LoginResponse_USER LoginResponse_Role = 3
	// Guest can only view dashboard.
	LoginResponse_GUEST LoginResponse_Role = 4
)

// Enum value maps for LoginResponse_Role.
var (
	LoginResponse_Role_name = map[int32]string{
		0: "UNKNOWN",
		1: "ADMIN",
		2: "LIGHT_ADMIN",
		3: "USER",
		4: "GUEST",
	}
	LoginResponse_Role_value = map[string]int32{
		"UNKNOWN":     0,
		"ADMIN":       1,
		"LIGHT_ADMIN": 2,
		"USER":        3,
		"GUEST":       4,
	}
)

func (x LoginResponse_Role) Enum() *LoginResponse_Role {
	p := new(LoginResponse_Role)
	*p = x
	return p
}

func (x LoginResponse_Role) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LoginResponse_Role) Descriptor() protoreflect.EnumDescriptor {
	return file_pisc_proto_enumTypes[0].Descriptor()
}

func (LoginResponse_Role) Type() protoreflect.EnumType {
	return &file_pisc_proto_enumTypes[0]
}

func (x LoginResponse_Role) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LoginResponse_Role.Descriptor instead.
func (LoginResponse_Role) EnumDescriptor() ([]byte, []int) {
	return file_pisc_proto_rawDescGZIP(), []int{3, 0}
}

type PortResponse_Port_PortType int32

const (
	PortResponse_Port_UNKNOWN PortResponse_Port_PortType = 0
	PortResponse_Port_COPPOER PortResponse_Port_PortType = 1
	PortResponse_Port_FIBER   PortResponse_Port_PortType = 2
	PortResponse_Port_OTHER   PortResponse_Port_PortType = 3
)

// Enum value maps for PortResponse_Port_PortType.
var (
	PortResponse_Port_PortType_name = map[int32]string{
		0: "UNKNOWN",
		1: "COPPOER",
		2: "FIBER",
		3: "OTHER",
	}
	PortResponse_Port_PortType_value = map[string]int32{
		"UNKNOWN": 0,
		"COPPOER": 1,
		"FIBER":   2,
		"OTHER":   3,
	}
)

func (x PortResponse_Port_PortType) Enum() *PortResponse_Port_PortType {
	p := new(PortResponse_Port_PortType)
	*p = x
	return p
}

func (x PortResponse_Port_PortType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PortResponse_Port_PortType) Descriptor() protoreflect.EnumDescriptor {
	return file_pisc_proto_enumTypes[1].Descriptor()
}

func (PortResponse_Port_PortType) Type() protoreflect.EnumType {
	return &file_pisc_proto_enumTypes[1]
}

func (x PortResponse_Port_PortType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PortResponse_Port_PortType.Descriptor instead.
func (PortResponse_Port_PortType) EnumDescriptor() ([]byte, []int) {
	return file_pisc_proto_rawDescGZIP(), []int{10, 0, 0}
}

type PortResponse_Port_PortVlan int32

const (
	PortResponse_Port_ACCESS PortResponse_Port_PortVlan = 0
	PortResponse_Port_TRUNK  PortResponse_Port_PortVlan = 1
)

// Enum value maps for PortResponse_Port_PortVlan.
var (
	PortResponse_Port_PortVlan_name = map[int32]string{
		0: "ACCESS",
		1: "TRUNK",
	}
	PortResponse_Port_PortVlan_value = map[string]int32{
		"ACCESS": 0,
		"TRUNK":  1,
	}
)

func (x PortResponse_Port_PortVlan) Enum() *PortResponse_Port_PortVlan {
	p := new(PortResponse_Port_PortVlan)
	*p = x
	return p
}

func (x PortResponse_Port_PortVlan) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PortResponse_Port_PortVlan) Descriptor() protoreflect.EnumDescriptor {
	return file_pisc_proto_enumTypes[2].Descriptor()
}

func (PortResponse_Port_PortVlan) Type() protoreflect.EnumType {
	return &file_pisc_proto_enumTypes[2]
}

func (x PortResponse_Port_PortVlan) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PortResponse_Port_PortVlan.Descriptor instead.
func (PortResponse_Port_PortVlan) EnumDescriptor() ([]byte, []int) {
	return file_pisc_proto_rawDescGZIP(), []int{10, 0, 1}
}

type LicenseResponse_Level int32

const (
	// Evaluation can only use 30 days.
	LicenseResponse_EVALUATION LicenseResponse_Level = 0
	// Basic level only contain basic functions.
	LicenseResponse_BASIC LicenseResponse_Level = 1
	// Advanced level have few advance feature.
	LicenseResponse_ADVANCED LicenseResponse_Level = 2
	// Pro can have all features.
	LicenseResponse_PRO LicenseResponse_Level = 3
)

// Enum value maps for LicenseResponse_Level.
var (
	LicenseResponse_Level_name = map[int32]string{
		0: "EVALUATION",
		1: "BASIC",
		2: "ADVANCED",
		3: "PRO",
	}
	LicenseResponse_Level_value = map[string]int32{
		"EVALUATION": 0,
		"BASIC":      1,
		"ADVANCED":   2,
		"PRO":        3,
	}
)

func (x LicenseResponse_Level) Enum() *LicenseResponse_Level {
	p := new(LicenseResponse_Level)
	*p = x
	return p
}

func (x LicenseResponse_Level) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LicenseResponse_Level) Descriptor() protoreflect.EnumDescriptor {
	return file_pisc_proto_enumTypes[3].Descriptor()
}

func (LicenseResponse_Level) Type() protoreflect.EnumType {
	return &file_pisc_proto_enumTypes[3]
}

func (x LicenseResponse_Level) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LicenseResponse_Level.Descriptor instead.
func (LicenseResponse_Level) EnumDescriptor() ([]byte, []int) {
	return file_pisc_proto_rawDescGZIP(), []int{11, 0}
}

type IdMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *IdMessage) Reset() {
	*x = IdMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pisc_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdMessage) ProtoMessage() {}

func (x *IdMessage) ProtoReflect() protoreflect.Message {
	mi := &file_pisc_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdMessage.ProtoReflect.Descriptor instead.
func (*IdMessage) Descriptor() ([]byte, []int) {
	return file_pisc_proto_rawDescGZIP(), []int{0}
}

func (x *IdMessage) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type NameMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *NameMessage) Reset() {
	*x = NameMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pisc_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NameMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NameMessage) ProtoMessage() {}

func (x *NameMessage) ProtoReflect() protoreflect.Message {
	mi := &file_pisc_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NameMessage.ProtoReflect.Descriptor instead.
func (*NameMessage) Descriptor() ([]byte, []int) {
	return file_pisc_proto_rawDescGZIP(), []int{1}
}

func (x *NameMessage) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// LoginRequest contain username and password.
type LoginRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Username.
	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	// Password.
	Password string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
}

func (x *LoginRequest) Reset() {
	*x = LoginRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pisc_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginRequest) ProtoMessage() {}

func (x *LoginRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pisc_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginRequest.ProtoReflect.Descriptor instead.
func (*LoginRequest) Descriptor() ([]byte, []int) {
	return file_pisc_proto_rawDescGZIP(), []int{2}
}

func (x *LoginRequest) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *LoginRequest) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

// LoginResponse contain username, role and login result.
type LoginResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Username.
	Username string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	// User role.
	UserRole LoginResponse_Role `protobuf:"varint,2,opt,name=user_role,json=userRole,proto3,enum=proto.LoginResponse_Role" json:"user_role,omitempty"`
	// Login result.
	IsSuccess bool `protobuf:"varint,3,opt,name=is_success,json=isSuccess,proto3" json:"is_success,omitempty"`
}

func (x *LoginResponse) Reset() {
	*x = LoginResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pisc_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginResponse) ProtoMessage() {}

func (x *LoginResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pisc_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginResponse.ProtoReflect.Descriptor instead.
func (*LoginResponse) Descriptor() ([]byte, []int) {
	return file_pisc_proto_rawDescGZIP(), []int{3}
}

func (x *LoginResponse) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *LoginResponse) GetUserRole() LoginResponse_Role {
	if x != nil {
		return x.UserRole
	}
	return LoginResponse_UNKNOWN
}

func (x *LoginResponse) GetIsSuccess() bool {
	if x != nil {
		return x.IsSuccess
	}
	return false
}

// SystemInformationResponse contain basic system information.
type SystemInformationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Product name.
	ProductName string `protobuf:"bytes,1,opt,name=product_name,json=productName,proto3" json:"product_name,omitempty"`
	// Product serial number.
	ProductSerialNumber string `protobuf:"bytes,2,opt,name=product_serial_number,json=productSerialNumber,proto3" json:"product_serial_number,omitempty"`
	// The manufacturer for system
	SystemManufacturer string `protobuf:"bytes,3,opt,name=system_manufacturer,json=systemManufacturer,proto3" json:"system_manufacturer,omitempty"`
	// Hardware manufacturing date.
	SystemManufacturingDate string `protobuf:"bytes,4,opt,name=system_manufacturing_date,json=systemManufacturingDate,proto3" json:"system_manufacturing_date,omitempty"`
	// The version of software.
	SoftwareVersion string `protobuf:"bytes,5,opt,name=software_version,json=softwareVersion,proto3" json:"software_version,omitempty"`
	// The version of firmware.
	FirmwareVersion string `protobuf:"bytes,6,opt,name=firmware_version,json=firmwareVersion,proto3" json:"firmware_version,omitempty"`
	// The version of hardware.
	HardwareVersion string `protobuf:"bytes,7,opt,name=hardware_version,json=hardwareVersion,proto3" json:"hardware_version,omitempty"`
	// The date of hardware manufactured.
	HardwareManufacturingDate string `protobuf:"bytes,8,opt,name=hardware_manufacturing_date,json=hardwareManufacturingDate,proto3" json:"hardware_manufacturing_date,omitempty"`
	// The MAC address of eth0 in OpenBMC.
	LocalMac         string `protobuf:"bytes,9,opt,name=local_mac,json=localMac,proto3" json:"local_mac,omitempty"`
	CpuCore          uint32 `protobuf:"varint,10,opt,name=cpu_core,json=cpuCore,proto3" json:"cpu_core,omitempty"`
	RamSpaceTotalGb  uint64 `protobuf:"varint,11,opt,name=ram_space_total_gb,json=ramSpaceTotalGb,proto3" json:"ram_space_total_gb,omitempty"`
	DiskSpaceTotalGb uint64 `protobuf:"varint,12,opt,name=disk_space_total_gb,json=diskSpaceTotalGb,proto3" json:"disk_space_total_gb,omitempty"`
}

func (x *SystemInformationResponse) Reset() {
	*x = SystemInformationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pisc_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemInformationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemInformationResponse) ProtoMessage() {}

func (x *SystemInformationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pisc_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemInformationResponse.ProtoReflect.Descriptor instead.
func (*SystemInformationResponse) Descriptor() ([]byte, []int) {
	return file_pisc_proto_rawDescGZIP(), []int{4}
}

func (x *SystemInformationResponse) GetProductName() string {
	if x != nil {
		return x.ProductName
	}
	return ""
}

func (x *SystemInformationResponse) GetProductSerialNumber() string {
	if x != nil {
		return x.ProductSerialNumber
	}
	return ""
}

func (x *SystemInformationResponse) GetSystemManufacturer() string {
	if x != nil {
		return x.SystemManufacturer
	}
	return ""
}

func (x *SystemInformationResponse) GetSystemManufacturingDate() string {
	if x != nil {
		return x.SystemManufacturingDate
	}
	return ""
}

func (x *SystemInformationResponse) GetSoftwareVersion() string {
	if x != nil {
		return x.SoftwareVersion
	}
	return ""
}

func (x *SystemInformationResponse) GetFirmwareVersion() string {
	if x != nil {
		return x.FirmwareVersion
	}
	return ""
}

func (x *SystemInformationResponse) GetHardwareVersion() string {
	if x != nil {
		return x.HardwareVersion
	}
	return ""
}

func (x *SystemInformationResponse) GetHardwareManufacturingDate() string {
	if x != nil {
		return x.HardwareManufacturingDate
	}
	return ""
}

func (x *SystemInformationResponse) GetLocalMac() string {
	if x != nil {
		return x.LocalMac
	}
	return ""
}

func (x *SystemInformationResponse) GetCpuCore() uint32 {
	if x != nil {
		return x.CpuCore
	}
	return 0
}

func (x *SystemInformationResponse) GetRamSpaceTotalGb() uint64 {
	if x != nil {
		return x.RamSpaceTotalGb
	}
	return 0
}

func (x *SystemInformationResponse) GetDiskSpaceTotalGb() uint64 {
	if x != nil {
		return x.DiskSpaceTotalGb
	}
	return 0
}

type SystemCPUInformationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CpuUsage []uint32 `protobuf:"varint,1,rep,packed,name=cpu_usage,json=cpuUsage,proto3" json:"cpu_usage,omitempty"`
}

func (x *SystemCPUInformationResponse) Reset() {
	*x = SystemCPUInformationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pisc_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemCPUInformationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemCPUInformationResponse) ProtoMessage() {}

func (x *SystemCPUInformationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pisc_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemCPUInformationResponse.ProtoReflect.Descriptor instead.
func (*SystemCPUInformationResponse) Descriptor() ([]byte, []int) {
	return file_pisc_proto_rawDescGZIP(), []int{5}
}

func (x *SystemCPUInformationResponse) GetCpuUsage() []uint32 {
	if x != nil {
		return x.CpuUsage
	}
	return nil
}

type SystemRAMInformationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RamUsage uint32 `protobuf:"varint,1,opt,name=ram_usage,json=ramUsage,proto3" json:"ram_usage,omitempty"`
}

func (x *SystemRAMInformationResponse) Reset() {
	*x = SystemRAMInformationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pisc_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemRAMInformationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemRAMInformationResponse) ProtoMessage() {}

func (x *SystemRAMInformationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pisc_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemRAMInformationResponse.ProtoReflect.Descriptor instead.
func (*SystemRAMInformationResponse) Descriptor() ([]byte, []int) {
	return file_pisc_proto_rawDescGZIP(), []int{6}
}

func (x *SystemRAMInformationResponse) GetRamUsage() uint32 {
	if x != nil {
		return x.RamUsage
	}
	return 0
}

type SystemDiskInformationResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DiskSpaceUsage uint32 `protobuf:"varint,1,opt,name=disk_space_usage,json=diskSpaceUsage,proto3" json:"disk_space_usage,omitempty"`
}

func (x *SystemDiskInformationResponse) Reset() {
	*x = SystemDiskInformationResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pisc_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SystemDiskInformationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SystemDiskInformationResponse) ProtoMessage() {}

func (x *SystemDiskInformationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pisc_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SystemDiskInformationResponse.ProtoReflect.Descriptor instead.
func (*SystemDiskInformationResponse) Descriptor() ([]byte, []int) {
	return file_pisc_proto_rawDescGZIP(), []int{7}
}

func (x *SystemDiskInformationResponse) GetDiskSpaceUsage() uint32 {
	if x != nil {
		return x.DiskSpaceUsage
	}
	return 0
}

type Feature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Feature name.
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// Feature description.
	Description string `protobuf:"bytes,2,opt,name=description,proto3" json:"description,omitempty"`
	// Feature version.
	Version string `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty"`
	// Enabled feature.
	Enabled bool `protobuf:"varint,4,opt,name=enabled,proto3" json:"enabled,omitempty"`
}

func (x *Feature) Reset() {
	*x = Feature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pisc_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Feature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Feature) ProtoMessage() {}

func (x *Feature) ProtoReflect() protoreflect.Message {
	mi := &file_pisc_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Feature.ProtoReflect.Descriptor instead.
func (*Feature) Descriptor() ([]byte, []int) {
	return file_pisc_proto_rawDescGZIP(), []int{8}
}

func (x *Feature) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Feature) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Feature) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Feature) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

// FeatureListResponse contain all features in list.
type FeatureResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// feature_lists contain all features.
	FeatureLists []*Feature `protobuf:"bytes,1,rep,name=feature_lists,json=featureLists,proto3" json:"feature_lists,omitempty"`
}

func (x *FeatureResponse) Reset() {
	*x = FeatureResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pisc_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FeatureResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FeatureResponse) ProtoMessage() {}

func (x *FeatureResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pisc_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FeatureResponse.ProtoReflect.Descriptor instead.
func (*FeatureResponse) Descriptor() ([]byte, []int) {
	return file_pisc_proto_rawDescGZIP(), []int{9}
}

func (x *FeatureResponse) GetFeatureLists() []*Feature {
	if x != nil {
		return x.FeatureLists
	}
	return nil
}

type PortResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Port lists
	PortLists []*PortResponse_Port `protobuf:"bytes,1,rep,name=port_lists,json=portLists,proto3" json:"port_lists,omitempty"`
}

func (x *PortResponse) Reset() {
	*x = PortResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pisc_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PortResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortResponse) ProtoMessage() {}

func (x *PortResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pisc_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortResponse.ProtoReflect.Descriptor instead.
func (*PortResponse) Descriptor() ([]byte, []int) {
	return file_pisc_proto_rawDescGZIP(), []int{10}
}

func (x *PortResponse) GetPortLists() []*PortResponse_Port {
	if x != nil {
		return x.PortLists
	}
	return nil
}

type LicenseResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// License level.
	LicenseLevel LicenseResponse_Level `protobuf:"varint,1,opt,name=license_level,json=licenseLevel,proto3,enum=proto.LicenseResponse_Level" json:"license_level,omitempty"`
}

func (x *LicenseResponse) Reset() {
	*x = LicenseResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pisc_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LicenseResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LicenseResponse) ProtoMessage() {}

func (x *LicenseResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pisc_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LicenseResponse.ProtoReflect.Descriptor instead.
func (*LicenseResponse) Descriptor() ([]byte, []int) {
	return file_pisc_proto_rawDescGZIP(), []int{11}
}

func (x *LicenseResponse) GetLicenseLevel() LicenseResponse_Level {
	if x != nil {
		return x.LicenseLevel
	}
	return LicenseResponse_EVALUATION
}

type PortResponse_Port struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Port number.
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// Enabled port.
	Enabled bool `protobuf:"varint,2,opt,name=enabled,proto3" json:"enabled,omitempty"`
	// Port tx packets.
	TxPackets uint64 `protobuf:"varint,3,opt,name=tx_packets,json=txPackets,proto3" json:"tx_packets,omitempty"`
	// Port rx packets.
	RxPackets uint64 `protobuf:"varint,4,opt,name=rx_packets,json=rxPackets,proto3" json:"rx_packets,omitempty"`
	// Port tx bytes.
	TxBytes uint64 `protobuf:"varint,5,opt,name=tx_bytes,json=txBytes,proto3" json:"tx_bytes,omitempty"`
	// Port rx bytes.
	RxBytes uint64 `protobuf:"varint,6,opt,name=rx_bytes,json=rxBytes,proto3" json:"rx_bytes,omitempty"`
	// Port tx drop.
	TxDrop uint64 `protobuf:"varint,7,opt,name=tx_drop,json=txDrop,proto3" json:"tx_drop,omitempty"`
	// Port rx drop.
	RxDrop     uint64                     `protobuf:"varint,8,opt,name=rx_drop,json=rxDrop,proto3" json:"rx_drop,omitempty"`
	Type       PortResponse_Port_PortType `protobuf:"varint,9,opt,name=type,proto3,enum=proto.PortResponse_Port_PortType" json:"type,omitempty"`
	MacAddress string                     `protobuf:"bytes,10,opt,name=mac_address,json=macAddress,proto3" json:"mac_address,omitempty"`
	VlanMode   PortResponse_Port_PortVlan `protobuf:"varint,11,opt,name=vlan_mode,json=vlanMode,proto3,enum=proto.PortResponse_Port_PortVlan" json:"vlan_mode,omitempty"`
	VlanId     []uint32                   `protobuf:"varint,12,rep,packed,name=vlan_id,json=vlanId,proto3" json:"vlan_id,omitempty"`
	IpAddress  []string                   `protobuf:"bytes,13,rep,name=ip_address,json=ipAddress,proto3" json:"ip_address,omitempty"`
}

func (x *PortResponse_Port) Reset() {
	*x = PortResponse_Port{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pisc_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PortResponse_Port) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PortResponse_Port) ProtoMessage() {}

func (x *PortResponse_Port) ProtoReflect() protoreflect.Message {
	mi := &file_pisc_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PortResponse_Port.ProtoReflect.Descriptor instead.
func (*PortResponse_Port) Descriptor() ([]byte, []int) {
	return file_pisc_proto_rawDescGZIP(), []int{10, 0}
}

func (x *PortResponse_Port) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *PortResponse_Port) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *PortResponse_Port) GetTxPackets() uint64 {
	if x != nil {
		return x.TxPackets
	}
	return 0
}

func (x *PortResponse_Port) GetRxPackets() uint64 {
	if x != nil {
		return x.RxPackets
	}
	return 0
}

func (x *PortResponse_Port) GetTxBytes() uint64 {
	if x != nil {
		return x.TxBytes
	}
	return 0
}

func (x *PortResponse_Port) GetRxBytes() uint64 {
	if x != nil {
		return x.RxBytes
	}
	return 0
}

func (x *PortResponse_Port) GetTxDrop() uint64 {
	if x != nil {
		return x.TxDrop
	}
	return 0
}

func (x *PortResponse_Port) GetRxDrop() uint64 {
	if x != nil {
		return x.RxDrop
	}
	return 0
}

func (x *PortResponse_Port) GetType() PortResponse_Port_PortType {
	if x != nil {
		return x.Type
	}
	return PortResponse_Port_UNKNOWN
}

func (x *PortResponse_Port) GetMacAddress() string {
	if x != nil {
		return x.MacAddress
	}
	return ""
}

func (x *PortResponse_Port) GetVlanMode() PortResponse_Port_PortVlan {
	if x != nil {
		return x.VlanMode
	}
	return PortResponse_Port_ACCESS
}

func (x *PortResponse_Port) GetVlanId() []uint32 {
	if x != nil {
		return x.VlanId
	}
	return nil
}

func (x *PortResponse_Port) GetIpAddress() []string {
	if x != nil {
		return x.IpAddress
	}
	return nil
}

var File_pisc_proto protoreflect.FileDescriptor

var file_pisc_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x70, 0x69, 0x73, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2d, 0x67, 0x65, 0x6e, 0x2d,
	0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x1b,
	0x0a, 0x09, 0x49, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x22, 0x21, 0x0a, 0x0b, 0x4e,
	0x61, 0x6d, 0x65, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0xfa,
	0x01, 0x0a, 0x0c, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x34, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x18, 0x92, 0x41, 0x15, 0x32, 0x13, 0x54, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x20, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x2e, 0x52, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0x92, 0x41, 0x15, 0x32, 0x13, 0x54, 0x68,
	0x65, 0x20, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x20, 0x66, 0x69, 0x65, 0x6c, 0x64,
	0x2e, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x3a, 0x7e, 0x92, 0x41, 0x7b,
	0x0a, 0x4f, 0x2a, 0x0d, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x20, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x32, 0x28, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x6e,
	0x65, 0x65, 0x64, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x20, 0x74, 0x6f, 0x20, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x2e, 0xd2, 0x01, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0xd2, 0x01, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x32, 0x28, 0x7b, 0x22, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x3a, 0x20,
	0x22, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x22, 0x2c, 0x22, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x22, 0x3a, 0x22, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x22, 0x7d, 0x22, 0xcd, 0x02, 0x0a, 0x0d,
	0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x34, 0x0a,
	0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x18, 0x92, 0x41, 0x15, 0x32, 0x13, 0x54, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x20, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x2e, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x51, 0x0a, 0x09, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x72, 0x6f, 0x6c, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c,
	0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x6f, 0x6c,
	0x65, 0x42, 0x19, 0x92, 0x41, 0x16, 0x32, 0x14, 0x54, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72,
	0x20, 0x72, 0x6f, 0x6c, 0x65, 0x20, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x2e, 0x52, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x38, 0x0a, 0x0a, 0x69, 0x73, 0x5f, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x42, 0x19, 0x92, 0x41, 0x16, 0x32,
	0x14, 0x54, 0x68, 0x65, 0x20, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x6c,
	0x6f, 0x67, 0x69, 0x6e, 0x2e, 0x52, 0x09, 0x69, 0x73, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x22, 0x44, 0x0a, 0x04, 0x52, 0x6f, 0x6c, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e,
	0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x10, 0x01,
	0x12, 0x0f, 0x0a, 0x0b, 0x4c, 0x49, 0x47, 0x48, 0x54, 0x5f, 0x41, 0x44, 0x4d, 0x49, 0x4e, 0x10,
	0x02, 0x12, 0x08, 0x0a, 0x04, 0x55, 0x53, 0x45, 0x52, 0x10, 0x03, 0x12, 0x09, 0x0a, 0x05, 0x47,
	0x55, 0x45, 0x53, 0x54, 0x10, 0x04, 0x3a, 0x33, 0x92, 0x41, 0x30, 0x0a, 0x2e, 0x2a, 0x0e, 0x4c,
	0x6f, 0x67, 0x69, 0x6e, 0x20, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x1c, 0x49,
	0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x20, 0x6f, 0x66, 0x20, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x2e, 0x22, 0xe8, 0x06, 0x0a, 0x19,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x0c, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x12, 0x92, 0x41, 0x0f, 0x32, 0x0d, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x20, 0x6e, 0x61,
	0x6d, 0x65, 0x2e, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x4e, 0x0a, 0x15, 0x70, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x5f, 0x73, 0x65, 0x72, 0x69,
	0x61, 0x6c, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x1a, 0x92, 0x41, 0x17, 0x32, 0x15, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x20, 0x73, 0x65,
	0x72, 0x69, 0x61, 0x6c, 0x20, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x13, 0x70, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x74, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72,
	0x12, 0x4b, 0x0a, 0x13, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x6d, 0x61, 0x6e, 0x75, 0x66,
	0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0x92,
	0x41, 0x17, 0x32, 0x15, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x20, 0x6d, 0x61, 0x6e, 0x75,
	0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x2e, 0x52, 0x12, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x4d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x12, 0x4e, 0x0a,
	0x19, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74,
	0x75, 0x72, 0x69, 0x6e, 0x67, 0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x12, 0x92, 0x41, 0x0f, 0x32, 0x0d, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x20, 0x64,
	0x61, 0x74, 0x65, 0x2e, 0x52, 0x17, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x4d, 0x61, 0x6e, 0x75,
	0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x44, 0x61, 0x74, 0x65, 0x12, 0x41, 0x0a,
	0x10, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0x92, 0x41, 0x13, 0x32, 0x11, 0x53, 0x6f,
	0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x20, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x52,
	0x0f, 0x73, 0x6f, 0x66, 0x74, 0x77, 0x61, 0x72, 0x65, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x41, 0x0a, 0x10, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x5f, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0x92, 0x41, 0x13, 0x32,
	0x11, 0x46, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x20, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x2e, 0x52, 0x0f, 0x66, 0x69, 0x72, 0x6d, 0x77, 0x61, 0x72, 0x65, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x41, 0x0a, 0x10, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x5f,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0x92,
	0x41, 0x13, 0x32, 0x11, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x20, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x0f, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x5b, 0x0a, 0x1b, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61,
	0x72, 0x65, 0x5f, 0x6d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x69, 0x6e, 0x67,
	0x5f, 0x64, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1b, 0x92, 0x41, 0x18,
	0x32, 0x16, 0x48, 0x61, 0x72, 0x64, 0x77, 0x61, 0x72, 0x65, 0x20, 0x70, 0x72, 0x6f, 0x64, 0x75,
	0x63, 0x74, 0x20, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x52, 0x19, 0x68, 0x61, 0x72, 0x64, 0x77, 0x61,
	0x72, 0x65, 0x4d, 0x61, 0x6e, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x69, 0x6e, 0x67, 0x44,
	0x61, 0x74, 0x65, 0x12, 0x4c, 0x0a, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x6d, 0x61, 0x63,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2f, 0x92, 0x41, 0x2c, 0x32, 0x2a, 0x4d, 0x41, 0x43,
	0x20, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x20, 0x6f, 0x66, 0x20, 0x6d, 0x61, 0x6e, 0x61,
	0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x70, 0x6f, 0x72, 0x74, 0x20, 0x69, 0x6e, 0x20, 0x4f,
	0x70, 0x65, 0x6e, 0x42, 0x4d, 0x43, 0x2e, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x4d, 0x61,
	0x63, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x70, 0x75, 0x5f, 0x63, 0x6f, 0x72, 0x65, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x07, 0x63, 0x70, 0x75, 0x43, 0x6f, 0x72, 0x65, 0x12, 0x2b, 0x0a, 0x12,
	0x72, 0x61, 0x6d, 0x5f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f,
	0x67, 0x62, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0f, 0x72, 0x61, 0x6d, 0x53, 0x70, 0x61,
	0x63, 0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x47, 0x62, 0x12, 0x2d, 0x0a, 0x13, 0x64, 0x69, 0x73,
	0x6b, 0x5f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x5f, 0x67, 0x62,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x10, 0x64, 0x69, 0x73, 0x6b, 0x53, 0x70, 0x61, 0x63,
	0x65, 0x54, 0x6f, 0x74, 0x61, 0x6c, 0x47, 0x62, 0x3a, 0x3c, 0x92, 0x41, 0x39, 0x0a, 0x37, 0x2a,
	0x14, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x1f, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x20, 0x61,
	0x6c, 0x6c, 0x20, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x22, 0x76, 0x0a, 0x1c, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x43, 0x50, 0x55, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x63, 0x70, 0x75, 0x5f, 0x75, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x08, 0x63, 0x70, 0x75, 0x55, 0x73,
	0x61, 0x67, 0x65, 0x3a, 0x39, 0x92, 0x41, 0x36, 0x0a, 0x34, 0x2a, 0x18, 0x43, 0x50, 0x55, 0x20,
	0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x32, 0x18, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x20, 0x43, 0x50,
	0x55, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x22, 0x76,
	0x0a, 0x1c, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x41, 0x4d, 0x49, 0x6e, 0x66, 0x6f, 0x72,
	0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1b,
	0x0a, 0x09, 0x72, 0x61, 0x6d, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x08, 0x72, 0x61, 0x6d, 0x55, 0x73, 0x61, 0x67, 0x65, 0x3a, 0x39, 0x92, 0x41, 0x36,
	0x0a, 0x34, 0x2a, 0x18, 0x52, 0x41, 0x4d, 0x20, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x20, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x18, 0x49, 0x6e,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x20, 0x52, 0x41, 0x4d, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x22, 0x86, 0x01, 0x0a, 0x1d, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x10, 0x64, 0x69, 0x73, 0x6b,
	0x5f, 0x73, 0x70, 0x61, 0x63, 0x65, 0x5f, 0x75, 0x73, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0e, 0x64, 0x69, 0x73, 0x6b, 0x53, 0x70, 0x61, 0x63, 0x65, 0x55, 0x73, 0x61,
	0x67, 0x65, 0x3a, 0x3b, 0x92, 0x41, 0x38, 0x0a, 0x36, 0x2a, 0x19, 0x44, 0x69, 0x73, 0x6b, 0x20,
	0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x32, 0x19, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x20, 0x44, 0x69,
	0x73, 0x6b, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x22,
	0x83, 0x02, 0x0a, 0x07, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x2d, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x19, 0x92, 0x41, 0x16, 0x32, 0x14,
	0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x20, 0x6d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x20, 0x6e,
	0x61, 0x6d, 0x65, 0x2e, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x42, 0x0a, 0x0b, 0x64, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x20, 0x92, 0x41, 0x1d, 0x32, 0x1b, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x20, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x20, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x52, 0x0b, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36,
	0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x1c, 0x92, 0x41, 0x19, 0x32, 0x17, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x20, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x20, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x2e, 0x52, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x42, 0x1c, 0x92, 0x41, 0x19, 0x32, 0x17, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x20, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x20, 0x6d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x2e, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x3a, 0x15,
	0x92, 0x41, 0x12, 0x0a, 0x10, 0x2a, 0x0e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x20, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x22, 0x85, 0x01, 0x0a, 0x0f, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x0d, 0x66, 0x65, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x0e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x52, 0x0c, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x3a, 0x3d,
	0x92, 0x41, 0x3a, 0x0a, 0x38, 0x2a, 0x10, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x20, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x24, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x20, 0x6f, 0x66, 0x20, 0x66, 0x75, 0x6e, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x22, 0xef, 0x07,
	0x0a, 0x0c, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x37,
	0x0a, 0x0a, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x18, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x09, 0x70, 0x6f,
	0x72, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x73, 0x1a, 0xe5, 0x06, 0x0a, 0x04, 0x50, 0x6f, 0x72, 0x74,
	0x12, 0x17, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x42, 0x07, 0x92, 0x41,
	0x04, 0x9a, 0x02, 0x01, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x30, 0x0a, 0x07, 0x65, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x42, 0x16, 0x92, 0x41, 0x13, 0x32,
	0x0d, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x20, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x9a, 0x02,
	0x01, 0x02, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x33, 0x0a, 0x0a, 0x74,
	0x78, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x42,
	0x14, 0x92, 0x41, 0x11, 0x32, 0x0b, 0x54, 0x58, 0x20, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73,
	0x2e, 0x9a, 0x02, 0x01, 0x03, 0x52, 0x09, 0x74, 0x78, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73,
	0x12, 0x33, 0x0a, 0x0a, 0x72, 0x78, 0x5f, 0x70, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x04, 0x42, 0x14, 0x92, 0x41, 0x11, 0x32, 0x0b, 0x52, 0x58, 0x20, 0x70, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x73, 0x2e, 0x9a, 0x02, 0x01, 0x03, 0x52, 0x09, 0x72, 0x78, 0x50, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x2d, 0x0a, 0x08, 0x74, 0x78, 0x5f, 0x62, 0x79, 0x74, 0x65,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x42, 0x12, 0x92, 0x41, 0x0f, 0x32, 0x09, 0x54, 0x58,
	0x20, 0x62, 0x79, 0x74, 0x65, 0x73, 0x2e, 0x9a, 0x02, 0x01, 0x03, 0x52, 0x07, 0x74, 0x78, 0x42,
	0x79, 0x74, 0x65, 0x73, 0x12, 0x2d, 0x0a, 0x08, 0x72, 0x78, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x42, 0x12, 0x92, 0x41, 0x0f, 0x32, 0x09, 0x52, 0x58, 0x20,
	0x62, 0x79, 0x74, 0x65, 0x73, 0x2e, 0x9a, 0x02, 0x01, 0x03, 0x52, 0x07, 0x72, 0x78, 0x42, 0x79,
	0x74, 0x65, 0x73, 0x12, 0x2a, 0x0a, 0x07, 0x74, 0x78, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x04, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x08, 0x54, 0x58, 0x20, 0x64, 0x72,
	0x6f, 0x70, 0x2e, 0x9a, 0x02, 0x01, 0x03, 0x52, 0x06, 0x74, 0x78, 0x44, 0x72, 0x6f, 0x70, 0x12,
	0x2a, 0x0a, 0x07, 0x72, 0x78, 0x5f, 0x64, 0x72, 0x6f, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04,
	0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x08, 0x52, 0x58, 0x20, 0x64, 0x72, 0x6f, 0x70, 0x2e, 0x9a,
	0x02, 0x01, 0x03, 0x52, 0x06, 0x72, 0x78, 0x44, 0x72, 0x6f, 0x70, 0x12, 0x54, 0x0a, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x50,
	0x6f, 0x72, 0x74, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x42, 0x1d, 0x92, 0x41,
	0x1a, 0x32, 0x18, 0x50, 0x6f, 0x72, 0x74, 0x20, 0x74, 0x79, 0x70, 0x65, 0x2e, 0x20, 0x43, 0x6f,
	0x70, 0x70, 0x65, 0x72, 0x2f, 0x46, 0x69, 0x62, 0x65, 0x72, 0x2e, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x3b, 0x0a, 0x0b, 0x6d, 0x61, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0x92, 0x41, 0x17, 0x32, 0x11, 0x50, 0x6f, 0x72,
	0x74, 0x20, 0x4d, 0x41, 0x43, 0x20, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x2e, 0x9a, 0x02,
	0x01, 0x07, 0x52, 0x0a, 0x6d, 0x61, 0x63, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x61,
	0x0a, 0x09, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x21, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x2e, 0x50, 0x6f, 0x72, 0x74,
	0x56, 0x6c, 0x61, 0x6e, 0x42, 0x21, 0x92, 0x41, 0x1e, 0x32, 0x1c, 0x50, 0x6f, 0x72, 0x74, 0x20,
	0x76, 0x6c, 0x61, 0x6e, 0x20, 0x6d, 0x6f, 0x64, 0x65, 0x2e, 0x20, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x2f, 0x54, 0x72, 0x75, 0x6e, 0x6b, 0x52, 0x08, 0x76, 0x6c, 0x61, 0x6e, 0x4d, 0x6f, 0x64,
	0x65, 0x12, 0x2a, 0x0a, 0x07, 0x76, 0x6c, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0c, 0x20, 0x03,
	0x28, 0x0d, 0x42, 0x11, 0x92, 0x41, 0x0e, 0x32, 0x08, 0x56, 0x4c, 0x41, 0x4e, 0x20, 0x49, 0x44,
	0x2e, 0x9a, 0x02, 0x01, 0x03, 0x52, 0x06, 0x76, 0x6c, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x33, 0x0a,
	0x0a, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28,
	0x09, 0x42, 0x14, 0x92, 0x41, 0x11, 0x32, 0x0b, 0x49, 0x50, 0x20, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x2e, 0x9a, 0x02, 0x01, 0x07, 0x52, 0x09, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x22, 0x3a, 0x0a, 0x08, 0x50, 0x6f, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b,
	0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x43,
	0x4f, 0x50, 0x50, 0x4f, 0x45, 0x52, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x46, 0x49, 0x42, 0x45,
	0x52, 0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x4f, 0x54, 0x48, 0x45, 0x52, 0x10, 0x03, 0x22, 0x21,
	0x0a, 0x08, 0x50, 0x6f, 0x72, 0x74, 0x56, 0x6c, 0x61, 0x6e, 0x12, 0x0a, 0x0a, 0x06, 0x41, 0x43,
	0x43, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x54, 0x52, 0x55, 0x4e, 0x4b, 0x10,
	0x01, 0x3a, 0x3c, 0x92, 0x41, 0x39, 0x0a, 0x37, 0x2a, 0x0b, 0x50, 0x6f, 0x72, 0x74, 0x20, 0x53,
	0x74, 0x72, 0x75, 0x63, 0x74, 0x32, 0x28, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x6e, 0x65, 0x65, 0x64, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x6f, 0x20, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x2e, 0x3a,
	0x3e, 0x92, 0x41, 0x3b, 0x0a, 0x39, 0x2a, 0x0d, 0x50, 0x6f, 0x72, 0x74, 0x20, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32, 0x28, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x6e, 0x65, 0x65, 0x64, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x6f, 0x20, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x2e, 0x22,
	0xe2, 0x01, 0x0a, 0x0f, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x56, 0x0a, 0x0d, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x5f, 0x6c,
	0x65, 0x76, 0x65, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x2e, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x42, 0x13, 0x92, 0x41, 0x10, 0x32, 0x0e, 0x4c,
	0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x20, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x2e, 0x52, 0x0c, 0x6c,
	0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x4c, 0x65, 0x76, 0x65, 0x6c, 0x22, 0x39, 0x0a, 0x05, 0x4c,
	0x65, 0x76, 0x65, 0x6c, 0x12, 0x0e, 0x0a, 0x0a, 0x45, 0x56, 0x41, 0x4c, 0x55, 0x41, 0x54, 0x49,
	0x4f, 0x4e, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x42, 0x41, 0x53, 0x49, 0x43, 0x10, 0x01, 0x12,
	0x0c, 0x0a, 0x08, 0x41, 0x44, 0x56, 0x41, 0x4e, 0x43, 0x45, 0x44, 0x10, 0x02, 0x12, 0x07, 0x0a,
	0x03, 0x50, 0x52, 0x4f, 0x10, 0x03, 0x3a, 0x3c, 0x92, 0x41, 0x39, 0x0a, 0x37, 0x2a, 0x10, 0x4c,
	0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x20, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x32,
	0x23, 0x49, 0x6e, 0x63, 0x6c, 0x75, 0x64, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x69, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x6c, 0x69, 0x63, 0x65,
	0x6e, 0x73, 0x65, 0x2e, 0x32, 0xc0, 0x0a, 0x0a, 0x0b, 0x50, 0x69, 0x73, 0x63, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x12, 0x8f, 0x02, 0x0a, 0x09, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x41, 0x75,
	0x74, 0x68, 0x12, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x6f, 0x67, 0x69, 0x6e,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0xd6, 0x01,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x13, 0x22, 0x0e, 0x2f, 0x76, 0x31, 0x2f, 0x61, 0x75, 0x74, 0x68,
	0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0xb9, 0x01, 0x0a, 0x04, 0x41,
	0x75, 0x74, 0x68, 0x12, 0x14, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x20, 0x41, 0x75, 0x74, 0x68, 0x65,
	0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x9a, 0x01, 0x46, 0x72, 0x6f, 0x6e,
	0x74, 0x65, 0x6e, 0x64, 0x20, 0x73, 0x65, 0x6e, 0x64, 0x20, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61,
	0x6d, 0x65, 0x2f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x62,
	0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x20, 0x74, 0x6f, 0x20, 0x61, 0x75, 0x74, 0x68, 0x65, 0x6e,
	0x74, 0x69, 0x63, 0x61, 0x74, 0x65, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20,
	0x69, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x20, 0x54, 0x65, 0x73,
	0x74, 0x20, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x20, 0x61, 0x64, 0x6d, 0x69, 0x6e,
	0x2f, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x5f, 0x61, 0x64, 0x6d, 0x69, 0x6e, 0x2f, 0x75, 0x73, 0x65,
	0x72, 0x2f, 0x67, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x20, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x20, 0x69, 0x73, 0x20, 0x73, 0x61, 0x6d, 0x65, 0x20, 0x61, 0x73, 0x20, 0x75, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x2e, 0x12, 0xa5, 0x01, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x20, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x53, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x0e, 0x12, 0x0c, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x79, 0x73, 0x2f, 0x69, 0x6e, 0x66, 0x6f, 0x92,
	0x41, 0x3c, 0x0a, 0x06, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x12, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x20, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x1e,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x53, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x20, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xa7,
	0x01, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x43, 0x50, 0x55, 0x49,
	0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70,
	0x74, 0x79, 0x1a, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x43, 0x50, 0x55, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0d, 0x12,
	0x0b, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x79, 0x73, 0x2f, 0x63, 0x70, 0x75, 0x92, 0x41, 0x39, 0x0a,
	0x06, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x0f, 0x43, 0x50, 0x55, 0x20, 0x49, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x1e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x20, 0x49, 0x6e, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0xa7, 0x01, 0x0a, 0x17, 0x47, 0x65, 0x74,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x41, 0x4d, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x23, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x41, 0x4d, 0x49, 0x6e,
	0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x4f, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0d, 0x12, 0x0b, 0x2f, 0x76, 0x31, 0x2f, 0x73,
	0x79, 0x73, 0x2f, 0x72, 0x61, 0x6d, 0x92, 0x41, 0x39, 0x0a, 0x06, 0x53, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x12, 0x0f, 0x52, 0x41, 0x4d, 0x20, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x1a, 0x1e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x20, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0xab, 0x01, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d,
	0x44, 0x69, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x24, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x44, 0x69, 0x73, 0x6b, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x51, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x0e, 0x12, 0x0c, 0x2f, 0x76, 0x31, 0x2f, 0x73, 0x79, 0x73, 0x2f, 0x64,
	0x69, 0x73, 0x6b, 0x92, 0x41, 0x3a, 0x0a, 0x06, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x10,
	0x44, 0x69, 0x73, 0x6b, 0x20, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x1a, 0x1e, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x53, 0x79,
	0x73, 0x74, 0x65, 0x6d, 0x20, 0x49, 0x6e, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x84, 0x01, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12,
	0x12, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x1a, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x65, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4a, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x23, 0x12, 0x0b, 0x2f, 0x76, 0x31, 0x2f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x5a, 0x14, 0x12, 0x12, 0x2f, 0x76, 0x31, 0x2f, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x2f,
	0x7b, 0x6e, 0x61, 0x6d, 0x65, 0x7d, 0x92, 0x41, 0x1e, 0x0a, 0x07, 0x46, 0x65, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x1a, 0x13, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20,
	0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x6e, 0x0a, 0x07, 0x47, 0x65, 0x74, 0x50, 0x6f,
	0x72, 0x74, 0x12, 0x10, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x49, 0x64, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x1a, 0x13, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x50, 0x6f, 0x72,
	0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x3c, 0x82, 0xd3, 0xe4, 0x93, 0x02,
	0x1b, 0x12, 0x08, 0x2f, 0x76, 0x31, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x5a, 0x0f, 0x12, 0x0d, 0x2f,
	0x76, 0x31, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x7b, 0x69, 0x64, 0x7d, 0x92, 0x41, 0x18, 0x0a,
	0x04, 0x50, 0x6f, 0x72, 0x74, 0x1a, 0x10, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x20, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x7e, 0x0a, 0x0a, 0x47, 0x65, 0x74, 0x4c, 0x69,
	0x63, 0x65, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x16, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x40, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x11, 0x12, 0x0f, 0x2f,
	0x76, 0x31, 0x2f, 0x73, 0x79, 0x73, 0x2f, 0x6c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x92, 0x41,
	0x26, 0x0a, 0x06, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x07, 0x4c, 0x69, 0x63, 0x65, 0x6e,
	0x73, 0x65, 0x1a, 0x13, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x20,
	0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x42, 0x9d, 0x02, 0x5a, 0x09, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2f, 0x61, 0x70, 0x69, 0x92, 0x41, 0x8e, 0x02, 0x12, 0x4f, 0x0a, 0x04, 0x50, 0x49, 0x53,
	0x43, 0x22, 0x42, 0x0a, 0x0c, 0x50, 0x49, 0x53, 0x43, 0x20, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63,
	0x74, 0x12, 0x1a, 0x68, 0x74, 0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x77, 0x77, 0x77, 0x2e, 0x65,
	0x64, 0x67, 0x65, 0x2d, 0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x1a, 0x16, 0x6a,
	0x69, 0x6d, 0x6d, 0x79, 0x5f, 0x6f, 0x75, 0x40, 0x65, 0x64, 0x67, 0x65, 0x2d, 0x63, 0x6f, 0x72,
	0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x32, 0x03, 0x31, 0x2e, 0x30, 0x52, 0x50, 0x0a, 0x03, 0x34, 0x30,
	0x33, 0x12, 0x49, 0x0a, 0x47, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20, 0x77, 0x68,
	0x65, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x75, 0x73, 0x65, 0x72, 0x20, 0x64, 0x6f, 0x65, 0x73,
	0x20, 0x6e, 0x6f, 0x74, 0x20, 0x68, 0x61, 0x76, 0x65, 0x20, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x6f, 0x20, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x52, 0x3b, 0x0a, 0x03,
	0x34, 0x30, 0x34, 0x12, 0x34, 0x0a, 0x2a, 0x52, 0x65, 0x74, 0x75, 0x72, 0x6e, 0x65, 0x64, 0x20,
	0x77, 0x68, 0x65, 0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x20, 0x64, 0x6f, 0x65, 0x73, 0x20, 0x6e, 0x6f, 0x74, 0x20, 0x65, 0x78, 0x69, 0x73, 0x74,
	0x2e, 0x12, 0x06, 0x0a, 0x04, 0x9a, 0x02, 0x01, 0x07, 0x72, 0x2c, 0x0a, 0x0f, 0x4d, 0x6f, 0x72,
	0x65, 0x20, 0x61, 0x62, 0x6f, 0x75, 0x74, 0x20, 0x50, 0x49, 0x53, 0x43, 0x12, 0x19, 0x68, 0x74,
	0x74, 0x70, 0x73, 0x3a, 0x2f, 0x2f, 0x70, 0x69, 0x73, 0x63, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x2d,
	0x63, 0x6f, 0x72, 0x65, 0x2e, 0x63, 0x6e, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pisc_proto_rawDescOnce sync.Once
	file_pisc_proto_rawDescData = file_pisc_proto_rawDesc
)

func file_pisc_proto_rawDescGZIP() []byte {
	file_pisc_proto_rawDescOnce.Do(func() {
		file_pisc_proto_rawDescData = protoimpl.X.CompressGZIP(file_pisc_proto_rawDescData)
	})
	return file_pisc_proto_rawDescData
}

var file_pisc_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_pisc_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_pisc_proto_goTypes = []interface{}{
	(LoginResponse_Role)(0),               // 0: proto.LoginResponse.Role
	(PortResponse_Port_PortType)(0),       // 1: proto.PortResponse.Port.PortType
	(PortResponse_Port_PortVlan)(0),       // 2: proto.PortResponse.Port.PortVlan
	(LicenseResponse_Level)(0),            // 3: proto.LicenseResponse.Level
	(*IdMessage)(nil),                     // 4: proto.IdMessage
	(*NameMessage)(nil),                   // 5: proto.NameMessage
	(*LoginRequest)(nil),                  // 6: proto.LoginRequest
	(*LoginResponse)(nil),                 // 7: proto.LoginResponse
	(*SystemInformationResponse)(nil),     // 8: proto.SystemInformationResponse
	(*SystemCPUInformationResponse)(nil),  // 9: proto.SystemCPUInformationResponse
	(*SystemRAMInformationResponse)(nil),  // 10: proto.SystemRAMInformationResponse
	(*SystemDiskInformationResponse)(nil), // 11: proto.SystemDiskInformationResponse
	(*Feature)(nil),                       // 12: proto.Feature
	(*FeatureResponse)(nil),               // 13: proto.FeatureResponse
	(*PortResponse)(nil),                  // 14: proto.PortResponse
	(*LicenseResponse)(nil),               // 15: proto.LicenseResponse
	(*PortResponse_Port)(nil),             // 16: proto.PortResponse.Port
	(*emptypb.Empty)(nil),                 // 17: google.protobuf.Empty
}
var file_pisc_proto_depIdxs = []int32{
	0,  // 0: proto.LoginResponse.user_role:type_name -> proto.LoginResponse.Role
	12, // 1: proto.FeatureResponse.feature_lists:type_name -> proto.Feature
	16, // 2: proto.PortResponse.port_lists:type_name -> proto.PortResponse.Port
	3,  // 3: proto.LicenseResponse.license_level:type_name -> proto.LicenseResponse.Level
	1,  // 4: proto.PortResponse.Port.type:type_name -> proto.PortResponse.Port.PortType
	2,  // 5: proto.PortResponse.Port.vlan_mode:type_name -> proto.PortResponse.Port.PortVlan
	6,  // 6: proto.PiscService.LoginAuth:input_type -> proto.LoginRequest
	17, // 7: proto.PiscService.GetSystemInformation:input_type -> google.protobuf.Empty
	17, // 8: proto.PiscService.GetSystemCPUInformation:input_type -> google.protobuf.Empty
	17, // 9: proto.PiscService.GetSystemRAMInformation:input_type -> google.protobuf.Empty
	17, // 10: proto.PiscService.GetSystemDiskInformation:input_type -> google.protobuf.Empty
	5,  // 11: proto.PiscService.GetFeature:input_type -> proto.NameMessage
	4,  // 12: proto.PiscService.GetPort:input_type -> proto.IdMessage
	17, // 13: proto.PiscService.GetLicense:input_type -> google.protobuf.Empty
	7,  // 14: proto.PiscService.LoginAuth:output_type -> proto.LoginResponse
	8,  // 15: proto.PiscService.GetSystemInformation:output_type -> proto.SystemInformationResponse
	9,  // 16: proto.PiscService.GetSystemCPUInformation:output_type -> proto.SystemCPUInformationResponse
	10, // 17: proto.PiscService.GetSystemRAMInformation:output_type -> proto.SystemRAMInformationResponse
	11, // 18: proto.PiscService.GetSystemDiskInformation:output_type -> proto.SystemDiskInformationResponse
	13, // 19: proto.PiscService.GetFeature:output_type -> proto.FeatureResponse
	14, // 20: proto.PiscService.GetPort:output_type -> proto.PortResponse
	15, // 21: proto.PiscService.GetLicense:output_type -> proto.LicenseResponse
	14, // [14:22] is the sub-list for method output_type
	6,  // [6:14] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_pisc_proto_init() }
func file_pisc_proto_init() {
	if File_pisc_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pisc_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pisc_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NameMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pisc_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pisc_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pisc_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SystemInformationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pisc_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SystemCPUInformationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pisc_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SystemRAMInformationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pisc_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SystemDiskInformationResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pisc_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Feature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pisc_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FeatureResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pisc_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PortResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pisc_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LicenseResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pisc_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PortResponse_Port); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pisc_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pisc_proto_goTypes,
		DependencyIndexes: file_pisc_proto_depIdxs,
		EnumInfos:         file_pisc_proto_enumTypes,
		MessageInfos:      file_pisc_proto_msgTypes,
	}.Build()
	File_pisc_proto = out.File
	file_pisc_proto_rawDesc = nil
	file_pisc_proto_goTypes = nil
	file_pisc_proto_depIdxs = nil
}
